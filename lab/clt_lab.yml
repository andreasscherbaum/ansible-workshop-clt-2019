---

- name: setup CLT lab environment
  hosts: localhost
  gather_facts: false

  vars:


  tasks:

  # the EC2 module does not play well with a proxy
  - name: verify that proxy is not set
    fail:
      msg: "$http_proxy is set!"
    when: lookup('env','http_proxy')|default('') != ""

  - name: include configuration
    include_vars:
      file: configuration.yml

  - name: include aws credentials
    include_vars:
      file: awscreds.yml


  - name: gather AMI facts
    ec2_ami_facts:
      aws_access_key: "{{ aws_access_key }}"
      aws_secret_key: "{{ aws_secret_key }}"
      owners: "{{ ami_owner }}"
      region: "{{ _region }}"
      filters:
        name: "{{ ami_name }}-{{ ami_version }}"
    register: ami_images
    loop: "{{ regions }}"
    loop_control:
      loop_var: _region
      label: "{{ _region }}"

  - name: extract AMI information
    set_fact:
      ami: "{{ ami | default({}) | combine( { _ami.invocation.module_args.region: _ami.images.0.image_id } ) }}"
    loop: "{{ ami_images.results }}"
    loop_control:
      loop_var: _ami
      label: "{{ _ami.invocation.module_args.region }}"

#  - debug: msg="{{ ami }}"

  - name: create VPCs
    ec2_vpc_net:
      aws_access_key: "{{ aws_access_key }}"
      aws_secret_key: "{{ aws_secret_key }}"
      cidr_block: "{{ vpc_cidr }}"
      name: "{{ vpc_name }}"
      region: "{{ _region }}"
    loop: "{{ regions }}"
    loop_control:
      loop_var: _region
      label: "{{ _region }}"

  - name: gather VPC facts
    ec2_vpc_net_facts:
      aws_access_key: "{{ aws_access_key }}"
      aws_secret_key: "{{ aws_secret_key }}"
      region: "{{ _region }}"
      filters:
        "tag:Name": "{{ vpc_name }}"
    register: vpcs
    loop: "{{ regions }}"
    loop_control:
      loop_var: _region
      label: "{{ _region }}"

  - name: extract VPC information
    set_fact:
      vpc_id: "{{ vpc_id | default({}) | combine( { _vpc._ansible_item_label: _vpc.vpcs.0.vpc_id } ) }}"
    loop: "{{ vpcs.results }}"
    loop_control:
      loop_var: _vpc
      label: "{{ _vpc._ansible_item_label }}"

#  - debug: msg="{{ vpc_id }}"

  - name: create Subnets
    ec2_vpc_subnet:
      aws_access_key: "{{ aws_access_key }}"
      aws_secret_key: "{{ aws_secret_key }}"
      cidr: "{{ subnet_cidr }}"
      vpc_id: "{{ vpc_id[_region] }}"
      resource_tags:
        Name: "{{ subnet_name }}"
      region: "{{ _region }}"
    loop: "{{ regions }}"
    loop_control:
      loop_var: _region
      label: "{{ _region }}"

  - name: gather Subnet facts
    ec2_vpc_subnet_facts:
      aws_access_key: "{{ aws_access_key }}"
      aws_secret_key: "{{ aws_secret_key }}"
      region: "{{ _region }}"
      filters:
        "tag:Name": "{{ subnet_name }}"
    register: subnets
    loop: "{{ regions }}"
    loop_control:
      loop_var: _region
      label: "{{ _region }}"

  - name: extract Subnet information
    set_fact:
      subnet_id: "{{ subnet_id | default({}) | combine( { _subnet._ansible_item_label: _subnet.subnets.0.subnet_id } ) }}"
    loop: "{{ subnets.results }}"
    loop_control:
      loop_var: _subnet
      label: "{{ _subnet._ansible_item_label }}"

#  - debug: msg="{{ subnet_id }}"

  - name: include attendees
    include_vars:
      file: attendees.yml

  - name: create local dirs
    file:
      path: "./{{ attendee_prefix }}{{ item }}"
      state: directory
    with_sequence: start=0 end="{{ attendees|length - 1 }}" format="%02d"

  - name: template ansible.cfg
    template:
      src: ansible.cfg.j2
      dest: "./{{ attendee_prefix }}{{ item }}/ansible.cfg"
    with_sequence: start=0 end="{{ attendees|length - 1 }}" format="%02d"

  - name: create ec2 key pairs
    ec2_key:
      aws_access_key: "{{ aws_access_key }}"
      aws_secret_key: "{{ aws_secret_key }}"
      region: "{{ attendees[item | int]['region'] }}"
      name: "{{ attendee_prefix }}{{ item }}"
    with_sequence: start=0 end="{{ attendees|length - 1 }}" format="%02d"
    register: ec2_keys

  - name: save private keys
    copy:
      content: "{{ item.key.private_key }}" 
      dest: "./{{ item.key.name }}/key.pem"
      mode: 0600
    when: item.changed
    loop: "{{ ec2_keys.results }}"
    loop_control:
      label: "{{ item.key.name }}"

  - name: save region
    copy:
      content: "{{ item.invocation.module_args.region }}" 
      dest: "./{{ item.key.name }}/region.txt"
      mode: 0600
    when: item.changed
    loop: "{{ ec2_keys.results }}"
    loop_control:
      label: "{{ item.key.name }}"

  - name: create security group
    ec2_group:
      aws_access_key: "{{ aws_access_key }}"
      aws_secret_key: "{{ aws_secret_key }}"
      region: "{{ _region }}"
      name: "{{ security_group_name }}"
      description: Security group for CLT Ansible workshop lab
      vpc_id: "{{ vpc_id[_region] }}"
      rules:
        - proto: all
          cidr_ip: 0.0.0.0/0
    register: ec2_group
    loop: "{{ regions }}"
    loop_control:
      loop_var: _region
      label: "{{ _region }}"

  - name: create ec2 instances
    ec2:
      aws_access_key: "{{ aws_access_key }}"
      aws_secret_key: "{{ aws_secret_key }}"
      region: "{{ attendees[item.item | int]['region'] }}"
      image: "{{ ami[attendees[item.item | int]['region']] }}"
      instance_type: "{{ attendees[item.item | int]['size'] }}"
      assign_public_ip: yes
      exact_count: 2
      count_tag:
        Name: "{{ item.key.name }}"
      instance_tags:
        Name: "{{ item.key.name }}"
        Owner: "{{ attendees[item.item | int]['name'] }}"
      key_name: "{{ item.key.name }}"
      user_data: "{{lookup('file', 'user_data.sh')}}"
      vpc_subnet_id: "{{ subnet_id[attendees[item.item | int]['region']] }}"
      group: [ "{{ security_group_name }}" ]
      wait: yes
    loop: "{{ ec2_keys.results }}"
    register: ec2_instances
    loop_control:
      label: "{{ item.key.name }}"

  - name: template inventories
    template:
      src: inventory.j2
      dest: "./{{ item.tagged_instances[0].tags.Name }}/inventory"
    loop: "{{ ec2_instances.results }}"
    loop_control:
      label: "{{ item._ansible_item_label }}"

  - name: send email
    mail:
      from: "Andreas Scherbaum <ads@wars-nicht.de>"
      to: "{{ item.tagged_instances[0].tags.Owner }}"
      charset: utf8
      subject: "CLT 2019 Ansible Workshop - Zugangsdaten"
      body: "{{lookup('file', 'creds_mail.txt')}}"
      attach: [ "{{ playbook_dir }}/{{ item.tagged_instances[0].tags.Name }}/inventory",  "{{ playbook_dir }}/{{ item.tagged_instances[0].tags.Name }}/key.pem", "{{ playbook_dir }}/{{ item.tagged_instances[0].tags.Name }}/ansible.cfg" ]
    when: not lookup('first_found', dict(files = [ playbook_dir + '/' + item.tagged_instances[0].tags.Name + '/mailsent.txt' ], skip = true))
    loop: "{{ ec2_instances.results }}"
    loop_control:
      label: "{{ item._ansible_item_label }}"

  - name: mark email as sent
    local_action:
      module: copy
      content: "Email was sent"
      dest: "{{ playbook_dir }}/{{ item.tagged_instances[0].tags.Name }}/mailsent.txt"
      mode: 0600
    loop: "{{ ec2_instances.results }}"
    loop_control:
      label: "{{ item._ansible_item_label }}"
